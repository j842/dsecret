#!/bin/bash
set -o nounset

# print a message to stderr
warn() {
	local fmt="$1"
	shift
	printf "dsecret: $fmt\n" "$@" >&2
}

# print a message to stderr and exit with either
# the given status or that of the most recent command
die() {
	local st="$?"
	if [[ "$1" != *[^0-9]* ]]; then
		st="$1"
		shift
	fi
	warn "$@"
	exit "$st"
}

# print a canonicalized absolute pathname
realpath() {
	local path=$1

	# make path absolute
	local abspath=$path
	if [[ -n ${abspath##/*} ]]; then
		abspath=$(pwd -P)/$abspath
	fi

	# canonicalize path
	local dirname=
	if [[ -d $abspath ]]; then
		dirname=$(cd "$abspath" && pwd -P)
		abspath=$dirname
	elif [[ -e $abspath ]]; then
		dirname=$(cd "${abspath%/*}/" 2> /dev/null && pwd -P)
		abspath=$dirname/${abspath##*/}
	fi

	if [[ -d $dirname && -e $abspath ]]; then
		printf '%s' "$abspath"
	else
      echo ""
	fi
}

trim() {
    local s=$1 LC_CTYPE=C
    s=${s#"${s%%[![:space:]]*}"}
    s=${s%"${s##*[![:space:]]}"}
    printf '%s' "$s"
}

decrypt() {
   local INPUT_FILE="$1"
   [ ${INPUT_FILE: -2} == ".e" ] || return
   local OUTPUT_FILE=${INPUT_FILE::-2}  # drop last two characters.

   [ ! -e ${OUTPUT_FILE} ] || die "Output file already exists: ${OUTPUT_FILE}"
   [ ! -z $PASSPHRASE ] || die "Passphrase undefined."

   echo "Decrypting ${INPUT_FILE}"

   output=$(gpg --yes --batch --passphrase=${PASSPHRASE} -o ${OUTPUT_FILE} -d ${INPUT_FILE})

   [ $? -eq 0 ] || die "Decryption failed: $output"
   unlink "${INPUT_FILE}"
}

encrypt() {
   local INPUT_FILE="$1"
   [ ${INPUT_FILE: -2} != ".e" ] || return
   local OUTPUT_FILE="${INPUT_FILE}.e"

   [ ! -e ${OUTPUT_FILE} ] || die "Output file already exists: ${OUTPUT_FILE}" #unlink "${OUTPUT_FILE}"
   [ ! -z $PASSPHRASE ] || die "Passphrase undefined."

   echo "Encrypting ${INPUT_FILE}" #to ${OUTPUT_FILE}"

   output=$(gpg --yes --batch --armor --symmetric --cipher-algo AES256 \
      --passphrase=${PASSPHRASE} -o ${OUTPUT_FILE} -c ${INPUT_FILE})

   [ $? -eq 0 ] || die "Encryption failed: $output"
   unlink "${INPUT_FILE}"
}

findup () {
  local path="$1" #$(pwd)

#  warn "$path"
  while [[ "$path" != "" && ! -e "$path/$2" ]]; do
    path=${path%/*}
#    warn "$path"
  done
  echo "$path/$2"
}

get_passphrase() {
   # determine the environment variable for the passphrase.
   DIR="$1"
   [ -d "$DIR" ] || DIR=$(dirname "$1")

   PASSPHRASE_ENV_FILE="$(findup $DIR "dsecret.cfg")"

   [ -f "${PASSPHRASE_ENV_FILE}" ] || die "FATAL! Couldn't find dsecret.cfg in parent directories."

   source ${PASSPHRASE_ENV_FILE}

   [ ! -z ${PASSPHRASE_ENV:-} ] || die "The dsecret.cfg file did not define PASSPHRASE_ENV"
   [ ! -z "${!PASSPHRASE_ENV:-}" ] || die "FATAL! Environment variable not set: DEVOPS_PASSPHRASE_LOGAN"
   PASSPHRASE=$(trim "${!PASSPHRASE_ENV}")
}


dofile() {
   if [ $MODE == "e" ]; then
      encrypt $1
   else
      decrypt $1
   fi
}

walk() {
   echo "Checking $1"
   if [ -f "$1" ]; then
      dofile "$1"
   elif [ -d "$1" ]; then
      # If the entry is a file do some operations
      for entry in "$1"/*; do [[ -f "$entry" ]] && dofile "$entry"; done
      # If the entry is a directory call walk() == create recursion
      for entry in "$1"/*; do [[ -d "$entry" ]] && walk "$entry"; done
   else
      echo "Not a file or directory: $1"
   fi
}

show_help() {
   echo "dsecret - simple secret management"
   echo " "
   echo "usage: "
   echo " dsecret FILENAME           Encrypt/Decrypt single file"
   echo " dsecret {e|d} DIRECTORY    Recursively Encrypt/Decrypt directory"
   echo " dsecret install            Symlink to /usr/local/bin"
   echo " "
   exit 0
}


#------------------------

if [[ "$#" -eq 1 && "$1" == "install" ]]; then
   [[ $EUID -eq 0 ]] || die "Install must be run as root" 
   DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
   ln -s "$DIR/dsecret" /usr/local/bin/dsecret
   chmod a+rx /usr/local/bin/dsecret
   exit 0;
fi

if [ "$#" -eq 1 ]; then
   INPUT_FILE=$(realpath "$1")
   [[ -z ${INPUT_FILE} && -f ${INPUT_FILE} ]] || show_help
   MODE="e"
   [[ ${INPUT_FILE: -2} != ".e" ]] || MODE="d"
else
   [ "$#" -eq 2 ] || show_help
   MODE="$1"
   if [[ $MODE != "e" && $MODE != "d" ]]; then
      show_help
   fi
   INPUT_FILE=$(realpath "$2")
   [ -d ${INPUT_FILE} ] || show_help
fi

get_passphrase "$INPUT_FILE"
walk "$INPUT_FILE"
